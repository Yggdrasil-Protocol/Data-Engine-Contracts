/**
* This file was automatically generated by @oraichain/ts-codegen@0.35.9.
* DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
* and run the @oraichain/ts-codegen generate command to regenerate this file.
*/

import { CosmWasmClient, SigningCosmWasmClient, ExecuteResult } from "@cosmjs/cosmwasm-stargate";
import { Coin, StdFee } from "@cosmjs/amino";
import {InstantiateMsg, ExecuteMsg, Decimal256, Uint128, Price, PriceFeedReq, PriceFeedsResponse, PriceFeedResponse, QueryMsg, ArrayOfString} from "./PriceFeeds.types";
export interface PriceFeedsReadOnlyInterface {
  contractAddress: string;
  getAllSymbols: () => Promise<ArrayOfString>;
}
export class PriceFeedsQueryClient implements PriceFeedsReadOnlyInterface {
  client: CosmWasmClient;
  contractAddress: string;

  constructor(client: CosmWasmClient, contractAddress: string) {
    this.client = client;
    this.contractAddress = contractAddress;
    this.getAllSymbols = this.getAllSymbols.bind(this);
  }

  getAllSymbols = async (): Promise<ArrayOfString> => {
    return this.client.queryContractSmart(this.contractAddress, {
      get_all_symbols: {}
    });
  };
}
export interface PriceFeedsInterface extends PriceFeedsReadOnlyInterface {
  contractAddress: string;
  sender: string;
  publishPrice: ({
    price,
    symbol
  }: {
    price: Price;
    symbol: string;
  }, _fee?: number | StdFee | "auto", _memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
  updatePrice: ({
    price,
    symbol
  }: {
    price: Price;
    symbol: string;
  }, _fee?: number | StdFee | "auto", _memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
  requestPriceFeed: ({
    symbol
  }: {
    symbol: string;
  }, _fee?: number | StdFee | "auto", _memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
  requestPriceFeeds: ({
    request
  }: {
    request: PriceFeedReq;
  }, _fee?: number | StdFee | "auto", _memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
  receivePrices: ({
    pricesResponse
  }: {
    pricesResponse: PriceFeedsResponse;
  }, _fee?: number | StdFee | "auto", _memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
  receivePrice: ({
    priceResponse
  }: {
    priceResponse: PriceFeedResponse;
  }, _fee?: number | StdFee | "auto", _memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
  setCostPerRequest: ({
    costPerRequest
  }: {
    costPerRequest: Uint128;
  }, _fee?: number | StdFee | "auto", _memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
  changeAdmin: ({
    address
  }: {
    address: string;
  }, _fee?: number | StdFee | "auto", _memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
}
export class PriceFeedsClient extends PriceFeedsQueryClient implements PriceFeedsInterface {
  client: SigningCosmWasmClient;
  sender: string;
  contractAddress: string;

  constructor(client: SigningCosmWasmClient, sender: string, contractAddress: string) {
    super(client, contractAddress);
    this.client = client;
    this.sender = sender;
    this.contractAddress = contractAddress;
    this.publishPrice = this.publishPrice.bind(this);
    this.updatePrice = this.updatePrice.bind(this);
    this.requestPriceFeed = this.requestPriceFeed.bind(this);
    this.requestPriceFeeds = this.requestPriceFeeds.bind(this);
    this.receivePrices = this.receivePrices.bind(this);
    this.receivePrice = this.receivePrice.bind(this);
    this.setCostPerRequest = this.setCostPerRequest.bind(this);
    this.changeAdmin = this.changeAdmin.bind(this);
  }

  publishPrice = async ({
    price,
    symbol
  }: {
    price: Price;
    symbol: string;
  }, _fee: number | StdFee | "auto" = "auto", _memo?: string, _funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      publish_price: {
        price,
        symbol
      }
    }, _fee, _memo, _funds);
  };
  updatePrice = async ({
    price,
    symbol
  }: {
    price: Price;
    symbol: string;
  }, _fee: number | StdFee | "auto" = "auto", _memo?: string, _funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      update_price: {
        price,
        symbol
      }
    }, _fee, _memo, _funds);
  };
  requestPriceFeed = async ({
    symbol
  }: {
    symbol: string;
  }, _fee: number | StdFee | "auto" = "auto", _memo?: string, _funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      request_price_feed: {
        symbol
      }
    }, _fee, _memo, _funds);
  };
  requestPriceFeeds = async ({
    request
  }: {
    request: PriceFeedReq;
  }, _fee: number | StdFee | "auto" = "auto", _memo?: string, _funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      request_price_feeds: {
        request
      }
    }, _fee, _memo, _funds);
  };
  receivePrices = async ({
    pricesResponse
  }: {
    pricesResponse: PriceFeedsResponse;
  }, _fee: number | StdFee | "auto" = "auto", _memo?: string, _funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      receive_prices: {
        prices_response: pricesResponse
      }
    }, _fee, _memo, _funds);
  };
  receivePrice = async ({
    priceResponse
  }: {
    priceResponse: PriceFeedResponse;
  }, _fee: number | StdFee | "auto" = "auto", _memo?: string, _funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      receive_price: {
        price_response: priceResponse
      }
    }, _fee, _memo, _funds);
  };
  setCostPerRequest = async ({
    costPerRequest
  }: {
    costPerRequest: Uint128;
  }, _fee: number | StdFee | "auto" = "auto", _memo?: string, _funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      set_cost_per_request: {
        cost_per_request: costPerRequest
      }
    }, _fee, _memo, _funds);
  };
  changeAdmin = async ({
    address
  }: {
    address: string;
  }, _fee: number | StdFee | "auto" = "auto", _memo?: string, _funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      change_admin: {
        address
      }
    }, _fee, _memo, _funds);
  };
}